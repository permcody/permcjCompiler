======================================================================
 TM 2.4 - A virtual machine for CS445
    plus
 A Description of the Execution Environment for C-

Apr 27, 2004  Robert Heckendorn
======================================================================


DATA LAYOUT
-----------

8 registers:  0-7 
 register 7 is the program counter and is denoted PC below 
 All registers are initialized to 0.

iMem instruction memory
  each memory location contains both an instruction and a comment.  The
     comment is very useful in debugging.
  iMem is initialized to Halt instructions and the comment: "* initially empty"

dMem data memory
 dMem[0] is initialized with the address of the last element in dMem.
 The rest of dMem is zeroed. 

REGISTER ONLY INSTRUCTIONS  (RO instructions)
--------------------------------------------
HALT           stop execution
IN r           reg[r] <- input integer value of register r from stdin
OUT r          reg[r] -> output integer value of register r to stdin
INB r          reg[r] <- input boolean value of register r from stdin (version 2.1)
OUTB r         reg[r] -> output boolean value of register r to stdin (version 2.1)
ADD r, s, t    reg[r] = reg[s] + reg[t]
SUB r, s, t    reg[r] = reg[s] - reg[t]
MUL r, s, t    reg[r] = reg[s] * reg[t]
DIV r, s, t    reg[r] = reg[s] / reg[t]

REGISTER TO MEMORY INSTRUCTIONS  (RM instructions)
--------------------------------------------
LD  r, d(s)    reg[r] = dMem[d + reg[s]]     (indirect)
LDA r, d(s)    reg[r] = d + reg[s]           (direct)
LDC r, d(x)    reg[r] = d                    (immediate)
ST  r, d(s)    dMem[d + reg[s]] = reg[r]
JLT r, d(s)    if reg[r]<0 reg[PC] = d + reg[s]
JLE r, d(s)    if reg[r]<=0 reg[PC] = d + reg[s] 
JEQ r, d(s)    if reg[r]==0 reg[PC] = d + reg[s] 
JNE r, d(s)    if reg[r]!=0 reg[PC] = d + reg[s]
JGE r, d(s)    if reg[r]>=0 reg[PC] = d + reg[s]
JGT r, d(s)    if reg[r]>0 reg[PC] = d + reg[s]

TM EXECUTION
------------

This is how execution works: 
    pc <- reg[7]
    test pc in range
    reg[7] <- pc+1
    inst <- fetch(pc)
    exec(inst)

Notice that at the head of the execution loop above reg[7] points
to the instruction BEFORE the one about to be executed.  Then
the first thing the loop will do is increment the PC.  During
an instruction execution the PC points at the instruction executing.

So LDA 7, 0(7)   does nothing but because it leaves pointer at next instr
So LDA 7, -1 (7) is infinite loop


TM COMMANDS (v2.4) 
------------------
Commands are:
 a(bortLimit <<n>> Maximum number of instructions between halts (default is 5000).
 b(reakpoint <<n>> Set a breakpoint for instr n.  No n means clear breakpoints.
 c(lear            Reset simulator for new execution of program
 d(Mem <b <n>>     Print n dMem locations starting at b (n can be negative to count up, defaults to last values used)
 e(xecStats        Print execution statistics since last load or clear
 g(o               Execute TM instructions until HALT
 h(elp             Cause this list of commands to be printed
 i(Mem <b <n>>     Print n iMem locations starting at b
 l(oad filename    Load filename into memory (default is last file)
 n(ext             Print the next command that will be executed
 p(rint            Toggle printing of total instructions executed ('go' only)
 q(uit             Terminate the simulation
 r(egs             Print the contents of the registers
 s(tep <n>         Execute n (default 1) TM instructions
 t(race            Toggle instruction trace
 u(nprompt)        Unprompted for script input
 x(it              Terminate the simulation
 = <r> <n>         Set register number r to value n (e.g. set the pc)
Also a # character placed after input will cause TM to halt
  after processing the IN or INB commands (e.g. 34#  or f# )  That way you
  can step after input without setting a breakpoint


======================================================================
 Generating Code for the Virtual Machine
======================================================================
 
THE TM REGISTERS 
----------------
These are the assigned registers for our virtual machine.  Only register
7 is actually configured by the "hardware" to be what it is defined below.
The rest is whatever we have made it to be.

0 - global pointer
1 - the local frame pointer (set to right after the globals)
2 - return value from a function (set at end of function call)
3,4,5,6 - accumulators
7 - the program counter or pc (used by TM)


======================================================================
 Memory Layout
======================================================================

THE FRAME LAYOUT
----------------

Frames for procedures are laid out as follows:

        +---------------------------------------+
reg1 -> | old frame pointer (old reg1)          |  loc
        +---------------------------------------+
        | add of instr to execute upon return   |  loc-1
        +---------------------------------------+
        | parm 1                                |  loc-2
        +---------------------------------------+
        | parm 2                                |  loc-3
        +---------------------------------------+
        | parm 3                                |  loc-4
        +---------------------------------------+
        | local var 1                           |  loc-5
        +---------------------------------------+
        | local var 2                           |  loc-6
        +---------------------------------------+
        | local var 3                           |  loc-7
        +---------------------------------------+
        | temp var 1                            |  loc-8
        +---------------------------------------+
        | temp var 2                            |  loc-9
        +---------------------------------------+

* parms are parameters for the function.
* locals are locals in the function both defined at the beginning
of the procedure and in compound statements inside the procedure.
Note that we could save space by overlaying nonconcurrent compound
statement scopes.
* temps are used to stretch the meager number of registers we have.
For example in doing (3+4)*(5+6)+7 we may need more temps than we have.


THE STACK LAYOUT
----------------

This is how the globals, frames and heap (which we don't have)
would be laid out:

           +---------------------------------------+  high addresses
globals -> |  globals                              |
           |                                       |
           +---------------------------------------+
frame 1 -> |  locals                               |
           |                                       |
           +---------------------------------------+
           |  temps                                |
           +---------------------------------------+
frame 2 -> |  locals                               |
           |                                       |
           +---------------------------------------+
           |  temps                                |
           +---------------------------------------+
reg 1  --> |  locals                               |
           |                                       |
           +---------------------------------------+
           |  temps                                |
           +---------------------------------------+
           |                                       |
           |            free space                 |
           |                                       |
                            .
                            .
                            .
           |                                       |
           |    (heap would go here)               |
           +---------------------------------------+  0 (low addresses)

        

======================================================================
 Some Bits of Code to Generate
======================================================================

GENERATING CODE
---------------

COMPILE TIME Variables: 

goff - the globaloffset is the relative offset of the next available space in
the global space

foff - the frameoffset is the relative offset of the next available space in
the stack.

toff - the tempoffset is the offset from the fromeoffset of the next available
temp variable

off = foff+toff and is the current size of the frame

IMPORTANT: that these values will be negative since memeory is growing
downward!


PROLOG CODE
-----------
This is the code that is called at the beginning of the program.
It sets up registers 0 and 1 and jumps to main.  Returning
from main halts the program.

0:  LD  0, 0(0)     * load gp with top of memory
1:  LDA 1, 0(0)     * set fp to top of memory (no globals)

    * begin call
2:  ST  1, goff(1)  * store old fp in ghost frame
3:  LDA 1, goff(1)  * move the fp to the new frame (this is a noop here) 
4:  LDA 3, 1(7)     * compute the return address at (skip 1 ahead) 
5:  LDA 7, main(7)  * jump to main
    * return here
    * ignore return value
6:  HALT 0, 0, 0   * end of program



CALLING SEQUENCE (caller)  [version 1]
-------------------------
At this point:
reg1 points to the old frame
off in compiler offset to first available space on stack
     relative to the beginning of the frame
foff in compiler offset to first available parameter
     relative to top of stack


* figure where the new local frame will go
LDA 3, off(1)   * where is top of stack

* load the first parameter
LD  4, var1(1)  * load in third temp
ST  4, foff(3)  * store in parameter space (foff++)

* load the second parameter
LD  4, var2(1)  * load in third temp
ST  4, foff(3)  * store in parameter space 

* begin call
ST  1, 0(3)     * store old fp in ghost frame
LDA 1, 0(3)     * move the fp to the new frame 
LDA 3, 1(7)     * compute the return address at (skip 1 ahead)
LDA 7, func(7)  * call func
* return to here 

At this point:
reg1 points to the new frame (top of old local stack)
reg2 has the return value from the function
reg3 contains return address in code space
reg7 points to the next instruction to execute



CALLING SEQUENCE (caller)  [version 2]
-------------------------
At this point:
reg1 points to the old frame
off in compiler offset to first available space on stack
     relative to the beginning of the frame
foff in compiler offset to first available parameter
     relative to the beginning of the frame

ST  1, off(1)   * save old frame pointer at first part of new frame

* load the first parameter
LD  4, var1(1)  * load in third temp
ST  4, foff(1)  * store in parameter space (foff++)

* load the second parameter
LD  4, var2(1)  * load in third temp
ST  4, foff(1)  * store in parameter space 

* begin call
LDA 1, off(1)   * move the fp to the new frame 
LDA 3, 1(7)     * compute the return address at (skip 1 ahead)
LDA 7, func(7)  * call func
* return to here 

At this point:
reg1 points to the new frame (top of old local stack)
reg2 has the return value from the function
reg3 contains return address in code space
reg7 points to the next instruction to execute



CALLING SEQUENCE (callee's prolog)
----------------------------------
It is the callee's responsibility to save the return address.  An
optimization is to not do this if you can perserve reg3 throughout the
call.

ST  3, -1(1)    * save return addr in current frame
 
 
RETURN
------

* save return value
LDA 2, 0(x)   * load the function return (reg2) with the answer from regx 

* begin return
LD  3, -1(1)  * recover old pc 
LD  1, 0(1)   * pop the frame 
LDA 7, 0(3)   * jump to old pc
 


LOAD CONSTANT
-------------
LCD 3, const(0)


RHS LOCAL VAR SCALAR
-------------------- 
LD  3, var(1) 


RHS GLOBAL VAR SCALAR
-------------------- 
LD  3, var(0) 


LHS LOCAL VAR SCALAR
--------------------
LDA 3, var(1)


RHS LOCAL ARRAY
---------------
LDA 3, var(1)    * array base 
SUB 3, 4         * index off of the base
LD  3, 0(3)      * access the element


LHS LOCAL ARRAY
---------------
LDA 3, var(1)    * array base
SUB 3, 4         * index off of the base
ST  x, 0(3)      * store in array


======================================================================
 Some TM Idioms
======================================================================


1. reg[r]++:

  LDA r, 1(r)

2. reg[r] = reg[r] + d: 
 
  LDA r, d(r)

3. reg[r] = reg[s]

  LDA r, 0(s)

4. goto reg[r] + d
 
  LDA 7, d(r)

5. goto relative to pc  (d is number of instructions skipped)

  LDA 7, d(7)

6. NOOP:

  LDA r, 0(r)

7. save address of following command for return in reg[r] 

  LDA r, 1(7)
 
